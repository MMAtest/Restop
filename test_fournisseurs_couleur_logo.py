#!/usr/bin/env python3
"""
Test des am√©liorations visuelles des fournisseurs avec codes couleur et logos
Tests sp√©cifiques pour les nouveaux champs 'couleur' et 'logo' dans l'API Fournisseurs
"""

import requests
import json
from datetime import datetime
import time

# Configuration
BASE_URL = "https://restop-manager.preview.emergentagent.com/api"
HEADERS = {"Content-Type": "application/json"}

class FournisseurCouleurLogoTestSuite:
    def __init__(self):
        self.test_results = []
        self.created_fournisseur_ids = []
        
    def log_result(self, test_name, success, message="", details=None):
        """Enregistre le r√©sultat d'un test"""
        result = {
            "test": test_name,
            "success": success,
            "message": message,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} - {test_name}: {message}")
        if details and not success:
            print(f"   D√©tails: {details}")
    
    def test_creation_fournisseur_avec_couleur_logo(self):
        """Test cr√©ation fournisseur avec nouveaux champs couleur et logo"""
        print("\n=== TEST CR√âATION FOURNISSEUR AVEC COULEUR ET LOGO ===")
        
        # Test 1: Boucherie Martin avec couleur rouge et logo emoji
        fournisseur_boucherie = {
            "nom": "Boucherie Martin",
            "email": "contact@boucherie-martin.fr",
            "telephone": "01.23.45.67.89",
            "couleur": "#DC2626",
            "logo": "ü•©"
        }
        
        try:
            response = requests.post(f"{BASE_URL}/fournisseurs", json=fournisseur_boucherie, headers=HEADERS)
            if response.status_code == 200:
                created_fournisseur = response.json()
                self.created_fournisseur_ids.append(created_fournisseur["id"])
                
                # V√©rifier que les nouveaux champs sont accept√©s et retourn√©s
                if (created_fournisseur.get("couleur") == "#DC2626" and 
                    created_fournisseur.get("logo") == "ü•©"):
                    self.log_result("POST /fournisseurs avec couleur/logo", True, 
                                  "Boucherie Martin cr√©√©e avec couleur rouge et logo viande")
                else:
                    self.log_result("POST /fournisseurs avec couleur/logo", False, 
                                  f"Champs incorrects - couleur: {created_fournisseur.get('couleur')}, logo: {created_fournisseur.get('logo')}")
            else:
                self.log_result("POST /fournisseurs avec couleur/logo", False, 
                              f"Erreur {response.status_code}", response.text)
        except Exception as e:
            self.log_result("POST /fournisseurs avec couleur/logo", False, "Exception", str(e))
        
        # Test 2: Poissonnerie Oc√©an avec couleur bleue et logo poisson
        fournisseur_poissonnerie = {
            "nom": "Poissonnerie Oc√©an",
            "email": "contact@poissonnerie-ocean.fr",
            "couleur": "#0284C7",
            "logo": "üêü"
        }
        
        try:
            response = requests.post(f"{BASE_URL}/fournisseurs", json=fournisseur_poissonnerie, headers=HEADERS)
            if response.status_code == 200:
                created_fournisseur = response.json()
                self.created_fournisseur_ids.append(created_fournisseur["id"])
                
                # V√©rifier les nouveaux champs
                if (created_fournisseur.get("couleur") == "#0284C7" and 
                    created_fournisseur.get("logo") == "üêü"):
                    self.log_result("POST /fournisseurs Poissonnerie", True, 
                                  "Poissonnerie Oc√©an cr√©√©e avec couleur bleue et logo poisson")
                else:
                    self.log_result("POST /fournisseurs Poissonnerie", False, 
                                  f"Champs incorrects - couleur: {created_fournisseur.get('couleur')}, logo: {created_fournisseur.get('logo')}")
            else:
                self.log_result("POST /fournisseurs Poissonnerie", False, 
                              f"Erreur {response.status_code}", response.text)
        except Exception as e:
            self.log_result("POST /fournisseurs Poissonnerie", False, "Exception", str(e))
    
    def test_creation_fournisseur_sans_couleur_logo(self):
        """Test cr√©ation fournisseur sans couleur/logo pour v√©rifier les valeurs par d√©faut"""
        print("\n=== TEST VALEURS PAR D√âFAUT COULEUR/LOGO ===")
        
        fournisseur_basique = {
            "nom": "Fournisseur Basique Test",
            "email": "test@basique.fr",
            "telephone": "01.11.22.33.44"
        }
        
        try:
            response = requests.post(f"{BASE_URL}/fournisseurs", json=fournisseur_basique, headers=HEADERS)
            if response.status_code == 200:
                created_fournisseur = response.json()
                self.created_fournisseur_ids.append(created_fournisseur["id"])
                
                # V√©rifier les valeurs par d√©faut
                couleur_defaut = created_fournisseur.get("couleur")
                logo_defaut = created_fournisseur.get("logo")
                
                if couleur_defaut == "#3B82F6":  # Couleur par d√©faut (bleu)
                    self.log_result("Couleur par d√©faut", True, f"Couleur par d√©faut correcte: {couleur_defaut}")
                else:
                    self.log_result("Couleur par d√©faut", False, f"Couleur par d√©faut incorrecte: {couleur_defaut}")
                
                if logo_defaut is None:  # Logo par d√©faut (null)
                    self.log_result("Logo par d√©faut", True, "Logo par d√©faut correct: null")
                else:
                    self.log_result("Logo par d√©faut", False, f"Logo par d√©faut incorrect: {logo_defaut}")
            else:
                self.log_result("POST /fournisseurs valeurs d√©faut", False, 
                              f"Erreur {response.status_code}", response.text)
        except Exception as e:
            self.log_result("POST /fournisseurs valeurs d√©faut", False, "Exception", str(e))
    
    def test_get_fournisseurs_avec_couleur_logo(self):
        """Test r√©cup√©ration des fournisseurs avec les nouveaux champs"""
        print("\n=== TEST GET FOURNISSEURS AVEC COULEUR/LOGO ===")
        
        try:
            response = requests.get(f"{BASE_URL}/fournisseurs")
            if response.status_code == 200:
                fournisseurs = response.json()
                
                # Chercher nos fournisseurs de test
                boucherie = next((f for f in fournisseurs if f["nom"] == "Boucherie Martin"), None)
                poissonnerie = next((f for f in fournisseurs if f["nom"] == "Poissonnerie Oc√©an"), None)
                
                if boucherie:
                    if (boucherie.get("couleur") == "#DC2626" and boucherie.get("logo") == "ü•©"):
                        self.log_result("GET /fournisseurs Boucherie", True, 
                                      "Boucherie Martin r√©cup√©r√©e avec couleur et logo corrects")
                    else:
                        self.log_result("GET /fournisseurs Boucherie", False, 
                                      f"Donn√©es incorrectes - couleur: {boucherie.get('couleur')}, logo: {boucherie.get('logo')}")
                else:
                    self.log_result("GET /fournisseurs Boucherie", False, "Boucherie Martin non trouv√©e")
                
                if poissonnerie:
                    if (poissonnerie.get("couleur") == "#0284C7" and poissonnerie.get("logo") == "üêü"):
                        self.log_result("GET /fournisseurs Poissonnerie", True, 
                                      "Poissonnerie Oc√©an r√©cup√©r√©e avec couleur et logo corrects")
                    else:
                        self.log_result("GET /fournisseurs Poissonnerie", False, 
                                      f"Donn√©es incorrectes - couleur: {poissonnerie.get('couleur')}, logo: {poissonnerie.get('logo')}")
                else:
                    self.log_result("GET /fournisseurs Poissonnerie", False, "Poissonnerie Oc√©an non trouv√©e")
                
                # V√©rifier la structure JSON g√©n√©rale
                if len(fournisseurs) > 0:
                    sample_fournisseur = fournisseurs[0]
                    if "couleur" in sample_fournisseur and "logo" in sample_fournisseur:
                        self.log_result("Structure JSON conforme", True, 
                                      "Tous les fournisseurs ont les champs couleur et logo")
                    else:
                        self.log_result("Structure JSON conforme", False, 
                                      "Champs couleur/logo manquants dans la structure")
            else:
                self.log_result("GET /fournisseurs", False, f"Erreur {response.status_code}", response.text)
        except Exception as e:
            self.log_result("GET /fournisseurs", False, "Exception", str(e))
    
    def test_get_fournisseur_by_id_avec_couleur_logo(self):
        """Test r√©cup√©ration d'un fournisseur sp√©cifique avec couleur/logo"""
        print("\n=== TEST GET FOURNISSEUR BY ID AVEC COULEUR/LOGO ===")
        
        if not self.created_fournisseur_ids:
            self.log_result("GET /fournisseurs/{id}", False, "Aucun fournisseur cr√©√© pour le test")
            return
        
        # Tester le premier fournisseur cr√©√© (Boucherie Martin)
        fournisseur_id = self.created_fournisseur_ids[0]
        
        try:
            response = requests.get(f"{BASE_URL}/fournisseurs/{fournisseur_id}")
            if response.status_code == 200:
                fournisseur = response.json()
                
                if (fournisseur.get("nom") == "Boucherie Martin" and
                    fournisseur.get("couleur") == "#DC2626" and
                    fournisseur.get("logo") == "ü•©"):
                    self.log_result("GET /fournisseurs/{id}", True, 
                                  "Fournisseur r√©cup√©r√© avec tous les champs couleur/logo")
                else:
                    self.log_result("GET /fournisseurs/{id}", False, 
                                  f"Donn√©es incorrectes: nom={fournisseur.get('nom')}, couleur={fournisseur.get('couleur')}, logo={fournisseur.get('logo')}")
            else:
                self.log_result("GET /fournisseurs/{id}", False, f"Erreur {response.status_code}", response.text)
        except Exception as e:
            self.log_result("GET /fournisseurs/{id}", False, "Exception", str(e))
    
    def test_modification_fournisseur_couleur_logo(self):
        """Test modification d'un fournisseur pour ajouter/modifier couleur et logo"""
        print("\n=== TEST MODIFICATION FOURNISSEUR COULEUR/LOGO ===")
        
        if not self.created_fournisseur_ids:
            self.log_result("PUT /fournisseurs/{id}", False, "Aucun fournisseur cr√©√© pour le test")
            return
        
        # Modifier le fournisseur basique pour ajouter couleur et logo
        fournisseur_id = self.created_fournisseur_ids[-1]  # Le dernier cr√©√© (fournisseur basique)
        
        updated_data = {
            "nom": "Fournisseur Basique Modifi√©",
            "email": "test@basique.fr",
            "telephone": "01.11.22.33.44",
            "couleur": "#10B981",  # Vert
            "logo": "üåø"  # Feuille
        }
        
        try:
            response = requests.put(f"{BASE_URL}/fournisseurs/{fournisseur_id}", 
                                  json=updated_data, headers=HEADERS)
            if response.status_code == 200:
                updated_fournisseur = response.json()
                
                if (updated_fournisseur.get("couleur") == "#10B981" and
                    updated_fournisseur.get("logo") == "üåø" and
                    updated_fournisseur.get("nom") == "Fournisseur Basique Modifi√©"):
                    self.log_result("PUT /fournisseurs/{id} couleur/logo", True, 
                                  "Fournisseur modifi√© avec nouvelle couleur verte et logo feuille")
                else:
                    self.log_result("PUT /fournisseurs/{id} couleur/logo", False, 
                                  f"Modification √©chou√©e - couleur: {updated_fournisseur.get('couleur')}, logo: {updated_fournisseur.get('logo')}")
            else:
                self.log_result("PUT /fournisseurs/{id} couleur/logo", False, 
                              f"Erreur {response.status_code}", response.text)
        except Exception as e:
            self.log_result("PUT /fournisseurs/{id} couleur/logo", False, "Exception", str(e))
    
    def test_validation_format_couleur_hex(self):
        """Test validation des formats de couleur hexad√©cimale"""
        print("\n=== TEST VALIDATION FORMAT COULEUR HEX ===")
        
        # Test avec couleur valide
        fournisseur_couleur_valide = {
            "nom": "Test Couleur Valide",
            "email": "test@couleur.fr",
            "couleur": "#FF5733"  # Format hex valide
        }
        
        try:
            response = requests.post(f"{BASE_URL}/fournisseurs", json=fournisseur_couleur_valide, headers=HEADERS)
            if response.status_code == 200:
                created_fournisseur = response.json()
                if created_fournisseur.get("couleur") == "#FF5733":
                    self.log_result("Validation couleur hex valide", True, "Couleur hex #FF5733 accept√©e")
                    self.created_fournisseur_ids.append(created_fournisseur["id"])
                else:
                    self.log_result("Validation couleur hex valide", False, "Couleur hex non sauvegard√©e")
            else:
                self.log_result("Validation couleur hex valide", False, f"Erreur {response.status_code}")
        except Exception as e:
            self.log_result("Validation couleur hex valide", False, "Exception", str(e))
        
        # Test avec couleur invalide (optionnel - d√©pend de la validation backend)
        fournisseur_couleur_invalide = {
            "nom": "Test Couleur Invalide",
            "email": "test@couleur-invalide.fr",
            "couleur": "rouge"  # Format non-hex
        }
        
        try:
            response = requests.post(f"{BASE_URL}/fournisseurs", json=fournisseur_couleur_invalide, headers=HEADERS)
            # Le backend peut soit accepter (et utiliser la valeur par d√©faut) soit rejeter
            if response.status_code == 200:
                created_fournisseur = response.json()
                couleur_result = created_fournisseur.get("couleur")
                if couleur_result == "#3B82F6":  # Valeur par d√©faut
                    self.log_result("Validation couleur invalide", True, 
                                  "Couleur invalide remplac√©e par d√©faut")
                    self.created_fournisseur_ids.append(created_fournisseur["id"])
                else:
                    self.log_result("Validation couleur invalide", True, 
                                  f"Couleur invalide accept√©e: {couleur_result}")
            else:
                self.log_result("Validation couleur invalide", True, 
                              f"Couleur invalide rejet√©e (erreur {response.status_code})")
        except Exception as e:
            self.log_result("Validation couleur invalide", False, "Exception", str(e))
    
    def test_compatibilite_fournisseurs_existants(self):
        """Test que les fournisseurs existants sans couleur/logo fonctionnent toujours"""
        print("\n=== TEST COMPATIBILIT√â FOURNISSEURS EXISTANTS ===")
        
        try:
            # R√©cup√©rer tous les fournisseurs
            response = requests.get(f"{BASE_URL}/fournisseurs")
            if response.status_code == 200:
                fournisseurs = response.json()
                
                # Chercher des fournisseurs qui pourraient √™tre anciens (sans nos noms de test)
                fournisseurs_existants = [f for f in fournisseurs if f["nom"] not in 
                                        ["Boucherie Martin", "Poissonnerie Oc√©an", "Fournisseur Basique Test", 
                                         "Fournisseur Basique Modifi√©", "Test Couleur Valide", "Test Couleur Invalide"]]
                
                if len(fournisseurs_existants) > 0:
                    # Tester un fournisseur existant
                    fournisseur_existant = fournisseurs_existants[0]
                    
                    # V√©rifier qu'il a les champs couleur et logo (m√™me si null/d√©faut)
                    if "couleur" in fournisseur_existant and "logo" in fournisseur_existant:
                        self.log_result("Compatibilit√© fournisseurs existants", True, 
                                      f"Fournisseur existant '{fournisseur_existant['nom']}' a les nouveaux champs")
                        
                        # Tester une modification sur ce fournisseur existant
                        fournisseur_id = fournisseur_existant["id"]
                        test_update = {
                            "nom": fournisseur_existant["nom"],
                            "email": fournisseur_existant.get("email", "test@existing.fr"),
                            "couleur": "#8B5CF6",  # Violet
                            "logo": "‚≠ê"
                        }
                        
                        update_response = requests.put(f"{BASE_URL}/fournisseurs/{fournisseur_id}", 
                                                     json=test_update, headers=HEADERS)
                        if update_response.status_code == 200:
                            updated = update_response.json()
                            if updated.get("couleur") == "#8B5CF6" and updated.get("logo") == "‚≠ê":
                                self.log_result("Modification fournisseur existant", True, 
                                              "Fournisseur existant modifi√© avec succ√®s")
                            else:
                                self.log_result("Modification fournisseur existant", False, 
                                              "Modification couleur/logo √©chou√©e")
                        else:
                            self.log_result("Modification fournisseur existant", False, 
                                          f"Erreur modification: {update_response.status_code}")
                    else:
                        self.log_result("Compatibilit√© fournisseurs existants", False, 
                                      "Fournisseur existant n'a pas les nouveaux champs")
                else:
                    self.log_result("Compatibilit√© fournisseurs existants", True, 
                                  "Aucun fournisseur existant trouv√© (tous sont nos tests)")
            else:
                self.log_result("Compatibilit√© fournisseurs existants", False, 
                              f"Erreur r√©cup√©ration fournisseurs: {response.status_code}")
        except Exception as e:
            self.log_result("Compatibilit√© fournisseurs existants", False, "Exception", str(e))
    
    def test_migration_donnees_existantes(self):
        """Test que la migration des donn√©es existantes fonctionne"""
        print("\n=== TEST MIGRATION DONN√âES EXISTANTES ===")
        
        try:
            # R√©cup√©rer tous les fournisseurs pour v√©rifier la migration
            response = requests.get(f"{BASE_URL}/fournisseurs")
            if response.status_code == 200:
                fournisseurs = response.json()
                
                # V√©rifier que tous les fournisseurs ont les nouveaux champs
                fournisseurs_avec_champs = [f for f in fournisseurs if "couleur" in f and "logo" in f]
                
                if len(fournisseurs_avec_champs) == len(fournisseurs):
                    self.log_result("Migration donn√©es existantes", True, 
                                  f"Tous les {len(fournisseurs)} fournisseurs ont les nouveaux champs")
                    
                    # V√©rifier les valeurs par d√©faut
                    fournisseurs_couleur_defaut = [f for f in fournisseurs if f.get("couleur") == "#3B82F6"]
                    fournisseurs_logo_null = [f for f in fournisseurs if f.get("logo") is None]
                    
                    self.log_result("Valeurs par d√©faut migration", True, 
                                  f"{len(fournisseurs_couleur_defaut)} avec couleur d√©faut, {len(fournisseurs_logo_null)} avec logo null")
                else:
                    self.log_result("Migration donn√©es existantes", False, 
                                  f"Seulement {len(fournisseurs_avec_champs)}/{len(fournisseurs)} fournisseurs migr√©s")
            else:
                self.log_result("Migration donn√©es existantes", False, 
                              f"Erreur r√©cup√©ration: {response.status_code}")
        except Exception as e:
            self.log_result("Migration donn√©es existantes", False, "Exception", str(e))
    
    def cleanup_test_data(self):
        """Nettoie les donn√©es de test cr√©√©es"""
        print("\n=== NETTOYAGE DONN√âES DE TEST ===")
        
        for fournisseur_id in self.created_fournisseur_ids:
            try:
                response = requests.delete(f"{BASE_URL}/fournisseurs/{fournisseur_id}")
                if response.status_code == 200:
                    print(f"‚úÖ Fournisseur {fournisseur_id} supprim√©")
                else:
                    print(f"‚ö†Ô∏è Erreur suppression {fournisseur_id}: {response.status_code}")
            except Exception as e:
                print(f"‚ö†Ô∏è Exception suppression {fournisseur_id}: {str(e)}")
    
    def run_all_tests(self):
        """Ex√©cute tous les tests"""
        print("üöÄ D√âBUT DES TESTS FOURNISSEURS COULEUR/LOGO")
        print("=" * 60)
        
        # Tests principaux
        self.test_creation_fournisseur_avec_couleur_logo()
        self.test_creation_fournisseur_sans_couleur_logo()
        self.test_get_fournisseurs_avec_couleur_logo()
        self.test_get_fournisseur_by_id_avec_couleur_logo()
        self.test_modification_fournisseur_couleur_logo()
        self.test_validation_format_couleur_hex()
        self.test_compatibilite_fournisseurs_existants()
        self.test_migration_donnees_existantes()
        
        # R√©sum√© des r√©sultats
        print("\n" + "=" * 60)
        print("üìä R√âSUM√â DES TESTS")
        print("=" * 60)
        
        total_tests = len(self.test_results)
        passed_tests = len([r for r in self.test_results if r["success"]])
        failed_tests = total_tests - passed_tests
        
        print(f"Total: {total_tests} tests")
        print(f"‚úÖ R√©ussis: {passed_tests}")
        print(f"‚ùå √âchou√©s: {failed_tests}")
        print(f"üìà Taux de r√©ussite: {(passed_tests/total_tests)*100:.1f}%")
        
        if failed_tests > 0:
            print("\n‚ùå TESTS √âCHOU√âS:")
            for result in self.test_results:
                if not result["success"]:
                    print(f"  - {result['test']}: {result['message']}")
        
        # Nettoyage (optionnel)
        # self.cleanup_test_data()
        
        return passed_tests, failed_tests

if __name__ == "__main__":
    test_suite = FournisseurCouleurLogoTestSuite()
    passed, failed = test_suite.run_all_tests()
    
    if failed == 0:
        print("\nüéâ TOUS LES TESTS SONT PASS√âS!")
    else:
        print(f"\n‚ö†Ô∏è {failed} test(s) ont √©chou√©")